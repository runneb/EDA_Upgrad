# -*- coding: utf-8 -*-
"""Upgrad Leads generation Assignment Rashmi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19XHeilOhw1c75jVFqcySNYz7Q6GVmP5p

### **Name** - Rashmi Bennur
### **Email** - rashme45@gmail.com
### **Contact** - +91-6363037556
"""

import pandas as pd
import seaborn as sns
import shap
import numpy as np
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,accuracy_score,confusion_matrix

df_leads_raw = pd.read_csv("data/Leads.csv")
df_leads_raw

df_leads_raw = df_leads_raw.drop(columns=['Prospect ID','Lead Number'])

col_names = df_leads_raw.columns

col_names

df_leads_raw.info()

categorical = [var for var in df_leads_raw.columns if df_leads_raw[var].dtype=='O']

print('There are {} categorical variables\n'.format(len(categorical)))

print('The categorical variables are :', categorical)

df_leads_raw[categorical].isnull().sum()

cat1 = [var for var in categorical if df_leads_raw[var].isnull().sum()!=0]

print(df_leads_raw[cat1].isnull().sum())

numerical = [var for var in df_leads_raw.columns if df_leads_raw[var].dtype!='O' and var!='Converted']
numerical

print(df_leads_raw[numerical].isnull().sum())

sns.pairplot(df_leads_raw, hue='Converted')

for col in categorical:
    print(col)
    list_map = df_leads_raw[col].unique()
    #print(list_map)

    dict= {}
    num=1
    for cat in list_map:
        dict[cat]= num
        num=num+1

    df_leads_raw[col] = df_leads_raw[col].map(dict)

df_leads_raw

for df1 in [df_leads_raw]:
    for col in numerical:
        if col=='Converted':
            continue
        col_median=df_leads_raw[col].median()
        df1[col].fillna(col_median, inplace=True)

X = df_leads_raw.drop(['Converted'], axis=1)

y = df_leads_raw['Converted']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

cols = X_train.columns

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

X_train = pd.DataFrame(X_train, columns=[cols])
X_test = pd.DataFrame(X_test, columns=[cols])

X_train[numerical].isnull().sum()

logreg_model = LogisticRegression(solver='liblinear', random_state=556)# {'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},

logreg_model.fit(X_train, y_train)

pred = logreg_model.predict(X_test)
clf_report = pd.DataFrame(classification_report(y_test, pred, output_dict=True))
print("Test Result:\n================================================")
print(f"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%")
print("_______________________________________________")
print(f"CLASSIFICATION REPORT:\n{clf_report}")
print("_______________________________________________")
print(f"Confusion Matrix: \n {confusion_matrix(y_test, pred)}\n")

shap.initjs()

x_train = shap.kmeans(X, 100)
explainer = shap.KernelExplainer(logreg_model.predict, x_train)
shap_values = explainer.shap_values(X_test, nsamples=200)

shap_reshaped= np.reshape(shap_values, (-1, 34))
shap_df = pd.DataFrame(data=shap_reshaped,columns=cols)

shap.summary_plot(shap_reshaped, X_test, plot_type="violin")

shap.summary_plot(shap_reshaped, X_test, plot_type="bar")